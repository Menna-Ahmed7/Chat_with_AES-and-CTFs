from AES_Cipher import encrypt  
from utilties import read_from_file,generate_public_key
import socket		

#reading q and alpha
q_DH,alpha_DH,q_gamal,alpha_gamal=read_from_file("data.txt")
#generating public and private keys for DH
private_key_DH=20 #less than q-1
public_key_DH=generate_public_key(q_DH,alpha_DH,private_key_DH)
#generating public and private keys for elgamal
private_key_gamal=15 #less than q-1
public_key_gamal=generate_public_key(q_gamal,alpha_gamal,private_key_gamal)


# next create a socket object 
s = socket.socket()		 
print ("Socket successfully created")

# reserve a port on your computer in our 
# case it is 12345 but it can be anything 
port = 6666			

# we have not typed any ip in the ip field instead we have inputted an empty string
# this makes the server listen to requests coming from other computers on the network 
s.bind(('', port))		 

# put the socket into listening mode 
s.listen(5)	 
print ("socket is listening")		 

# a forever loop until we interrupt it or 
# an error occurs 
i=0
public_reciever_gamal=''
while True: 
    # Establish connection with client. 
    c, addr = s.accept()	 
    # print ('Got connection from', addr )
    if i==0:
        c.send('Thank you for connecting'.encode())
        public_reciever_gamal=s.recv(1024).decode()
        print(public_reciever_gamal)
        c.send(str(public_key_gamal).encode()) 

        i=i+1
    

    # Close the connection with the client 
    c.close()

   # Import socket module 
from AES_Cipher import decrypt  
from utilties import read_from_file,generate_public_key
import socket	

#reading q and alpha
q_DH,alpha_DH,q_gamal,alpha_gamal=read_from_file("data.txt")
#generating public and private keys for DH
private_key_DH=15 #less than q-1
public_key_DH=generate_public_key(q_DH,alpha_DH,private_key_DH)
#generating public and private keys for elgamal
private_key_gamal=9 #less than q-1
public_key_gamal=generate_public_key(q_gamal,alpha_gamal,private_key_gamal)

# Create a socket object 
s = socket.socket()		 

# Define the port on which you want to connect 
port = 6666			

# connect to the server on local computer 
s.connect(('127.0.0.1', port)) 
i=0
public_sender_gamal=''
while(True):
    # receive data from the server and decoding to get the string.
    # print ('Got connection from', addr )
    if i==0:
        s.send(str(public_key_gamal).encode()) 
        public_sender_gamal=s.recv(1024).decode()
        print(public_sender_gamal)
        i=i+1
    # close the connection 
    s.close()	 
	
    # Import socket module 
from AES_Cipher import decrypt  
from utilties import read_from_file,generate_public_key
import socket	

#reading q and alpha
q_DH,alpha_DH,q_gamal,alpha_gamal=read_from_file("data.txt")
#generating public and private keys for DH
private_key_DH=15 #less than q-1
public_key_DH=generate_public_key(q_DH,alpha_DH,private_key_DH)
#generating public and private keys for elgamal
private_key_gamal=9 #less than q-1
public_key_gamal=generate_public_key(q_gamal,alpha_gamal,private_key_gamal)

# Create a socket object 
s = socket.socket()		 

# Define the port on which you want to connect 
port = 6666			

# connect to the server on local computer 
s.connect(('127.0.0.1', port)) 
i=0
public_sender_gamal=''
while(True):
    # receive data from the server and decoding to get the string.
    # print ('Got connection from', addr )
    if i==0:
        s.send(str(public_key_gamal).encode()) 
        public_sender_gamal=s.recv(1024).decode()
        print(public_sender_gamal)
        i=i+1
    # close the connection 
    s.close()	 
	